#!/usr/bin/env groovy

@Library('apm@current') _

pipeline {
  agent { label 'ubuntu-20.04 && immutable' }
  environment {
    REPO = "elastic-agent-shipper"
    BASE_DIR = "src/github.com/elastic/${env.REPO}"
    JOB_GIT_CREDENTIALS = "f6c7695a-671e-4f4f-a331-acdce44ff9ba"
    PIPELINE_LOG_LEVEL = 'INFO'
    DRA_OUTPUT = 'release-manager.out'
    SLACK_CHANNEL = '#ingest-notifications'
    NOTIFY_TO = 'elastic-agent+build-package@elastic.co'
    JOB_GCS_BUCKET = credentials('gcs-bucket')
    JOB_GCS_CREDENTIALS = 'fleet-ci-gcs-plugin'
    DOCKER_ELASTIC_SECRET = 'secret/observability-team/ci/docker-registry/prod'
    DOCKER_REGISTRY = 'docker.elastic.co'
  }
  options {
    timeout(time: 1, unit: 'HOURS')
    buildDiscarder(logRotator(numToKeepStr: '20', artifactNumToKeepStr: '20', daysToKeepStr: '30'))
    timestamps()
    ansiColor('xterm')
    disableResume()
    durabilityHint('PERFORMANCE_OPTIMIZED')
    rateLimitBuilds(throttle: [count: 60, durationName: 'hour', userBoost: true])
    quietPeriod(10)
  }
  triggers {
    issueCommentTrigger("${obltGitHubComments()}")
  }
  stages {
    stage('Checkout') {
      steps {
        pipelineManager([ cancelPreviousRunningBuilds: [ when: 'PR' ] ])
        deleteDir()
        gitCheckout(basedir: "${BASE_DIR}", githubNotifyFirstTimeContributor: true, shallow: false, noTags: false)
        stash allowEmpty: true, name: 'source', useDefaultExcludes: false
        dir("${BASE_DIR}"){
          setEnvVar('GO_VERSION', readFile(".go-version").trim())
        }
        setEnvVar('IS_BRANCH_AVAILABLE', isBranchUnifiedReleaseAvailable(env.BRANCH_NAME))
      }
    }
    stage('Check'){
      steps {
        withGithubNotify(context: "Check") {
          withMageEnv(version: "${env.GO_VERSION}"){
            dir("${BASE_DIR}"){
              setEnvVar('VERSION', sh(label: 'Get version', script: 'mage version', returnStdout: true)?.trim())
              cmd(label: 'mage notice', script: 'mage -v notice')
              cmd(label: 'mage check', script: 'mage -v check')
            }
          }
        }
      }
    }
    stage('Test') {
      environment {
        SNAPSHOT = 'true'
      }
      failFast false
      matrix {
        agent {label "${PLATFORM}"}
        options { skipDefaultCheckout() }
        axes {
          axis {
            name 'PLATFORM'
            values 'ubuntu-20.04 && immutable', 'windows-2019 && windows-immutable'
          }
        }
        stages {
          stage('Build'){
            steps {
              withGithubNotify(context: "Build-${PLATFORM}") {
                whenTrue(isUnix()) {
                  deleteDir()
                }
                unstash 'source'
                dir("${BASE_DIR}"){
                  withMageEnv(version: "${env.GO_VERSION}"){
                    cmd(label: 'Go build', script: 'mage -v build')
                  }
                }
              }
            }
          }
          stage('Test') {
            steps {
              withGithubNotify(context: "Test-${PLATFORM}") {
                dir("${BASE_DIR}"){
                  withMageEnv(){
                    cmd(label: 'Go unitTest', script: 'mage test')
                  }
                }
              }
            }
            post {
              always {
                junit(allowEmptyResults: true, keepLongStdio: true, testResults: '**/junit-report.xml')
              }
            }
          }
        }
      }
    }
    stage('Publish Snapshot') {
      environment {
        SNAPSHOT = 'true'
      }
      steps {
        withGithubNotify(context: "Publish-Snapshot") {
          dir("${BASE_DIR}"){
            withMageEnv(version: "${env.GO_VERSION}"){
              cmd(label: 'Go package', script: 'mage -v package:all')
            }
          }
          publishArtifacts(type: 'snapshot')
        }
      }
    }
    stage('Publish Release') {
      when {
        allOf {
          // The Unified Release process keeps moving branches as soon as a new
          // minor version is created, therefore old release branches won't be able
          // to use the release manager as their definition is removed.
          expression { return env.IS_BRANCH_AVAILABLE == "true" }
          not { branch 'main' }
        }
      }
      environment {
        SNAPSHOT = 'false'
      }
      steps {
        withGithubNotify(context: "Publish-Release") {
          whenTrue(isUnix()) {
            deleteDir()
          }
          unstash 'source'
          dir("${BASE_DIR}"){
            withMageEnv(version: "${env.GO_VERSION}"){
              cmd(label: 'Go package', script: 'mage -v package:all')
            }
          }
          publishArtifacts(type: 'staging')
        }
      }
    }
    stage('DRA Snapshot') {
      options { skipDefaultCheckout() }
      // The Unified Release process keeps moving branches as soon as a new
      // minor version is created, therefore old release branches won't be able
      // to use the release manager as their definition is removed.
      when {
        expression { return env.IS_BRANCH_AVAILABLE == "true" }
      }
      environment {
        HOME = "${env.WORKSPACE}"
      }
      steps {
        runReleaseManager(type: 'snapshot', outputFile: env.DRA_OUTPUT)
      }
      post {
        failure {
          notifyStatus(analyse: true,
                       file: "${BASE_DIR}/${env.DRA_OUTPUT}",
                       subject: "[${env.REPO}@${env.BRANCH_NAME}] The Daily releasable artifact failed.",
                       body: 'Contact the Release Platform team [#platform-release].')
        }
      }
    }
    stage('DRA Staging') {
      options { skipDefaultCheckout() }
      when {
        allOf {
          // The Unified Release process keeps moving branches as soon as a new
          // minor version is created, therefore old release branches won't be able
          // to use the release manager as their definition is removed.
          expression { return env.IS_BRANCH_AVAILABLE == "true" }
          not { branch 'main' }
        }
      }
      environment {
        HOME = "${env.WORKSPACE}"
      }
      steps {
        runReleaseManager(type: 'staging', outputFile: env.DRA_OUTPUT)
      }
      post {
        failure {
          notifyStatus(analyse: true,
                       file: "${BASE_DIR}/${env.DRA_OUTPUT}",
                       subject: "[${env.REPO}@${env.BRANCH_NAME}] The Daily releasable artifact failed.",
                       body: 'Contact the Release Platform team [#platform-release].')
        }
      }
    }
  }
  post {
    cleanup {
      notifyBuildResult(prComment: true,
                        analyzeFlakey: !isTag(), jobName: getFlakyJobName(withBranch: (isPR() ? env.CHANGE_TARGET : env.BRANCH_NAME)),
                        githubIssue: isBranch() && currentBuild.currentResult != "SUCCESS",
                        githubLabels: 'Team:Elastic-Agent-Data-Plane')
    }
  }
}

def notifyStatus(def args = [:]) {
  def releaseManagerFile = args.get('file', '')
  def analyse = args.get('analyse', false)
  def subject = args.get('subject', '')
  def body = args.get('body', '')
  releaseManagerNotification(file: releaseManagerFile,
                             analyse: analyse,
                             slackChannel: "${env.SLACK_CHANNEL}",
                             slackColor: 'danger',
                             slackCredentialsId: 'jenkins-slack-integration-token',
                             to: "${env.NOTIFY_TO}",
                             subject: subject,
                             body: "Build: (<${env.RUN_DISPLAY_URL}|here>).\n ${body}")
}

def publishArtifacts(def args = [:]) {
  // Copy those files to another location with the sha commit to test them afterward.
  googleStorageUpload(bucket: getBucketLocation(args.type),
    credentialsId: "${JOB_GCS_CREDENTIALS}",
    pathPrefix: "${BASE_DIR}/build/distributions/",
    pattern: "${BASE_DIR}/build/distributions/**/*",
    sharedPublicly: true,
    showInline: true)
}

def runReleaseManager(def args = [:]) {
  deleteDir()
  unstash 'source'
  googleStorageDownload(bucketUri: "${getBucketLocation(args.type)}/*",
                        credentialsId: "${JOB_GCS_CREDENTIALS}",
                        localDirectory: "${BASE_DIR}/build/distributions",
                        pathPrefix: getBucketPathPrefix(args.type))
  dir("${BASE_DIR}") {
    def mageGoal = args.type.equals('staging') ? 'release-manager-dependencies-release' : 'release-manager-dependencies-snapshot'
    withMageEnv() {
      sh(label: 'create dependencies file', script: "mage ${mageGoal}")
    }
    // help to download the latest release-manager docker image
    dockerLogin(secret: "${DOCKER_ELASTIC_SECRET}", registry: "${DOCKER_REGISTRY}")
    releaseManager(project: 'elastic-agent-shipper',
                   version: env.VERSION,
                   branch: env.BRANCH_NAME,
                   type: args.type,
                   artifactsFolder: 'build/distributions',
                   outputFile: args.outputFile)
  }
}

def getBucketLocation(type) {
  return "gs://${JOB_GCS_BUCKET}/${getBucketRelativeLocation(type)}"
}

def getBucketRelativeLocation(type) {
  def folder = type.equals('snapshot') ? 'commits' : type
  return "${env.REPO}/${folder}/${env.GIT_BASE_COMMIT}"
}

def getBucketPathPrefix(type) {
  // JOB_GCS_BUCKET contains the bucket and some folders,
  // let's build up the folder structure without the parent folder
  def relative = getBucketRelativeLocation(type)
  if (JOB_GCS_BUCKET.contains('/')) {
    return JOB_GCS_BUCKET.substring(JOB_GCS_BUCKET.indexOf('/') + 1) + '/' + relative
  }
  return relative
}
