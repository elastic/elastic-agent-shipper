syntax = "proto3";

option go_package = "github.com/elastic/elastic-agent-shipper/api";
package elastic.agent.shipper.v1;



import "google/protobuf/timestamp.proto";
import "google/protobuf/struct.proto";
import "google/rpc/status.proto";

service Producer {
 // Publishes a list of events via the Elastic agent shipper.
 // Blocks until all processing steps complete and data is written to the queue.
 // The order of `PublishRequest.events` always matches `PublishReply.results`.
 //
 // Returns the `codes.ResourceExhausted` gRPC status code if the queue is full and none of the events
 // can be accepted at the moment.
 //
 // If the queue could accept some events from the request, this returns a successful response
 // containing results for the first K events that were accepted by the queue.
 // The client is expected to retry sending the rest of the events in a separate request later.
 //
 // Inputs may execute multiple concurrent Produce requests for independent data streams. 
 // The order in which concurrent requests complete is not guaranteed. Use sequential requests to
 // control ordering.
 rpc PublishEvents(PublishRequest) returns (PublishReply);
 // Returns a stream of acknowledgements from outputs.
 rpc StreamAcknowledgements(StreamAcksRequest) returns (stream StreamAcksReply);
}
 
message PublishRequest {
 repeated Event events = 1; 
}
 
// Event is a translation of beat.Event into protobuf.
message Event {
 // Creation timestamp of the event.
 google.protobuf.Timestamp timestamp = 1;
 // Identifies the input that generated the event.
 Input input = 2;
 // Optional. Producers may specify a unique event ID if the event has a natural unique
 // identifier to simplify acknowledgement tracking. If no such identifier exists, the queue   
 // offset can be used for acknowledgement tracking.
 string event_id = 4;
 // Data stream for the event.
 DataStream data_stream = 5;
 // Metadata JSON object (map[string]google.protobuf.Value)
 google.protobuf.Struct metadata = 6;
 // Field JSON object (map[string]google.protobuf.Value)
 google.protobuf.Struct fields = 7;
 // Note: The google.protobuf.Value type should be extended (or re-implemented) with a
 // google.protobuf.Timestamp to avoid the cost of encoding timestamps as strings and then 
 // parsing them back into a date representation.
}
 
// Input identifiers from the agent policy, see example configuration.
message Input {
 // Input ID in the agent policy.
 string id = 1;
 // Input name in the agent policy.
 string name = 2;
 // Input type in the agent policy (e.g. logfile, winlog, endpoint, etc.)
 string type = 3;
}
 
// See https://www.elastic.co/blog/an-introduction-to-the-elastic-data-stream-naming-scheme
message DataStream {
 // Optional. Stable identifier for the data stream, see example configuration.
 string id = 1;
 string type = 2;
 string dataset = 3;
 string namespace = 4;
}
 
message PublishReply {
 // Results describing messages successfully published to the queue.
 //
 // The output order matches the input order e.g. `results[N]` maps to `events[N]`,
 // however, `results` may contain only the first K results for `events`, when
 // not all the events are accepted by the queue, so the list sizes may not match.
 repeated EventResult results = 1;
}

message EventResult {
 // Timestamp of the event that was published.
 google.protobuf.Timestamp timestamp = 1;
 // ID derived from the queue offset that uniquely identifies the event within the shipper 
 // system. Used to track the progress of events through the queue system.
 string queue_id = 2;
 // Optional. Event ID provided when the event was published, if it exists.
 string event_id = 3;
 // Optional. List of errors encountered by processors, if any. Processor
 // errors do not indicate the message failed to send.
 repeated google.rpc.Status processor_errors = 5;
}
 
message StreamAcksRequest {
 // Optional. Requests acknowledgements originating only from this input ID.
 string input_id = 1;
 // Optional. Requests acknowledgements for events for this data stream only.
 DataStream data_stream = 2;
}
 
message StreamAcksReply {
 repeated Acknowledgement acks = 1;
}
 
message Acknowledgement {
 // Timestamp of the event being acknowledged.
 google.protobuf.Timestamp timestamp = 1;
 // ID derived from the queue offset that uniquely identifies the event within the shipper 
 // system. Used to track the progress of events through the queue system.
 string queue_id = 2;
 // Optional. Event ID provided when the event was published, if it exists.
 string event_id = 3;
 // Optional. Error status indicating the message failed to send.
 google.rpc.Status error = 4;
}
