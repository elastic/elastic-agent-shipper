syntax = "proto3";

option go_package = "github.com/elastic/elastic-agent-shipper/api";
package elastic.agent.shipper.v1;

import "messages/publish.proto";
import "messages/ack.proto";

service Producer {
 // Publishes a list of events via the Elastic agent shipper.
 // Blocks until all processing steps complete and data is written to the queue.
 // The order of `PublishRequest.events` always matches `PublishReply.results`.
 //
 // Returns the `codes.ResourceExhausted` gRPC status code if the queue is full and none of the events
 // can be accepted at the moment.
 //
 // If the queue could accept some events from the request, this returns a successful response
 // containing results for the first K events that were accepted by the queue.
 // The client is expected to retry sending the rest of the events in a separate request later.
 //
 // Inputs may execute multiple concurrent Produce requests for independent data streams. 
 // The order in which concurrent requests complete is not guaranteed. Use sequential requests to
 // control ordering.
 rpc PublishEvents(messages.PublishRequest) returns (messages.PublishReply);
 // Returns a stream of acknowledgements from outputs.
 rpc StreamAcknowledgements(messages.StreamAcksRequest) returns (stream messages.StreamAcksReply);
}